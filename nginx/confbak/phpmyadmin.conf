server {
        listen       80;
        server_name  phpmyadmin.com;
	index index.php index.html;
	root /Users/tangkang/web/phpmyadmin/;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ [^/]\.php(/|$) {
		try_files $uri =404;
             	fastcgi_pass 127.0.0.1:9000;
             	fastcgi_index  index.php;
             	include fastcgi.conf;	
	     #用了include fastcgi.conf就不再用以下两行
             #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
             #include        fastcgi_params;
	
		#原本Nginx只有fastcgi_params，后来发现很多人在定义SCRIPT_FILENAME时使用了硬编码的方式。例如，fastcgi_param SCRIPT_FILENAME /var/www/foo$fastcgi_script_name。于是为了规范用法便引入了fastcgi.conf。

		#不过这样的话就产生一个疑问：为什么一定要引入一个新的配置文件，而不是修改旧的配置文件？这是因为fastcgi_param指令是数组型的，和普通指令相同的是：内层替换外层；和普通指令不同的是：当在同级多次使用的时候，是新增而不是替换。换句话说，如果在同级定义两次SCRIPT_FILENAME，那么它们都会被发送到后端，这可能会导致一些潜在的问题，为了避免此类情况，便引入了一个新的配置文件。

		#因此不再建议大家使用以下方式（搜了一下，网上大量的文章，并且nginx.conf的默认配置也是使用这种方式）：

		#fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

		#includ  fastcgi_params;
        }
      	location / {
                if (!-e $request_filename){
                         rewrite ^/(.*)$ /index.php?s=/$1 last;
                }
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        
        location ~ /\.ht {
            deny  all;
        }
    }

